vue.js 一个渐进式的，基于mvvm设计模式的javascript框架

适用于以数据操作为主的项目

MVVM设计模式：
传统网页组成3部分：HTML，CSS，JS

问题：
js肩负的任务太多太杂，获取数据，修改DOM，产生了大量重复的劳动

重新划分：
View视图：包含网页内容和样式
Model模型数据：程序中创建的，或者从服务器端获取的数据
viewModel：视图模型或者控制器，代替之前的dom/jquery的操作
           自动把模型中的数据，绑定到view中指定的位置
new Vue就是viewModel

原理：
引入vue.js时，等于在全局引入了一种新类型Vue 
包含：构造函数：创建该类型的子对象
      原型对象：包含该类型子对象共用的成员

new Vue（{
    el：告诉vue监听哪个父元素的内容
    data：{} 模型数据，保存页面需要的所有数据
}）
2大子系统：

响应系统
    new Vue（）将data中的每个模型数据提升为整个Vue对象的访问器
    属性。在访问属性的set方法中，只要修改模型数据的值，就会触发
    通知。通知vue框架修改页面。
虚拟dom树
    el： new vue时会查找指定父元素，遍历其所有字内容，用js程序
    模拟的一颗简化版的dom子树。因为真实的dom树节点内容太复杂；
    所以只生成有模型数据需要改变的dom树节点；
    当响应系统通知Vue修改Dom树时，遍历虚拟dom树，找到发生变化的
    节点，利用底层的dom api仅修改发生变化的dom元素。


interpolation {{}} 中可以包含以下几种情况的内容：
    模型变量名
    运算：算数 比较 逻辑 三目运算
    方法调用
    对象.属性
    数组[i]
    注意：if else for等程序结构不能放置
    只能绑定innerhtml，不能够绑定属性和事件
指令 directive：
    vue.js提供，用于增强html功能的特殊属性；HTML本身是静态的
    写死的，无法根据数据动态变化属性值
    需要动态绑定HTML属性时，都用指令，包括13个指令：
    1. v-bind 专门绑定属性值
        <any v-bind：属性=“模型变量”>
        简写为  :属性=”"

    2. v-for 根据数组或者集合内容，反复生成多个相同的html元素
        <any v-for="(元素，下标) in 数组；对象；字符串">
        首先根据in后的数组/集合中元素的个数，反复生成当前html元素
        每次in都会取出数组/集合中当前元素值和位置下标
        如果any下还有子元素，在子元素可用for获得元素值和下标绑定内容
        注意：
        v-for 放置在需要循环的子元素上面
        简写：不关心下标，只关心内容： v-for=“变量 in 数组”
        in 可以换为of 仅仅语法爱好
    3. v-if 根据一个bool类型的模型变量值作为条件，
       控制是否生成该元素到dom树，控制元素的显示和隐藏
       v-if=“模型变量”
       v-else-if=
       v-else
       一次判定每个条件，只要条件为true，就生成改元素，其余元素不生成
       注意：
            if else 使用时，必须作用于相同的元素类型上
            之间必须紧邻，不能插入其他元素
    4. v-show 用法和v-if 几乎完全一样
        v-show="bool类型的模型变量"
        
        show和if的区别，以及如何选择？
        if 和 else 使用添加删除的方式，显示元素，效率低
            适合控制多个元素，选择一个显示，代码精简
        show 两个div都有，使用display：none 来控制，效率高
            适合控制一个元素的隐藏，控制多个元素时，代码繁琐
        频繁隐藏显示切换，使用show；
        如果多个元素控制选择v-if

可以创建多个vue，每个vue观察一个区域的数据

    5. v-on： 为元素绑定事件处理函数
        在new Vue实例对象内添加事件处理函数
        在html元素上绑定事件处理函数
        v-on:click="abc()" abc定义在vue的methods中
        v-on:click="abc($event)"传递事件,$event是vue的内置的事件对象
        e.preventDefault()

        v-on: 可以被@符号多替代

        常用事件修饰符，简写 e.stopPropagation() e.preventDefault()
        @事件名.stop = "处理函数" @事件名.prevent = "处理函数"
        @事件名.prevent.stop=""
        键盘事件简写 @keyup.40
        
    6. v-html 和 v-text {{}}
        v-html 使用模型变量，替换当前元素的innerHTML
        v-text 使用模型变量替换当前元素的textContent
        隐藏{{}} 当请求响应加载满时，用户可能短暂看到{{}}
        解决：不用{{}} 使用v-text 和 v-html代替双花括号
        v-html v-text 在请求响应满时显示为空
        v-text="`xxxx ${price.toFixed(2)}`" 可以用模板字符串进行拼接
        v-html 也是一样

    7. v-cloak 在vue实例加载完之前，暂时隐藏需要绑定的元素
        避免在vue实例加载完之前，用户短暂看到{{}}
        1.自定义v-cloak属性选择器，定义display：none
            [v-cloak]{display:none}

        2.在要绑定的元素上，添加v-cloak
        原理 new vue实例加载完成后，会自动找到v-cloak属性并移除
        存在问题：有个 mounted() 函数，相当于vue的onload函数
        在Vue加载完成后，自动执行。
        mounted(){
            settimeout(): {
                this.price = 34.5
            }
        }
        mounted会飞快的执行完，然后取消v-cloak，这时候数据还没有
        回来，v-cloak不起作用；应该使用v-text绑定内容

    8. v-pre 保护内容中的{{}}不被编译，保持原样
        正文中刚好也有{{}}时，不想被vue识别

    9. v-once 让当前元素只在首次加载时，绑定一次，之后即使模型数据
        变化，也不会更新

    10. 双向绑定 用于绑定表单元素 v-model:value="kword"        
        简写方式：v-model="kword"

        v-bind单向绑定仅能模型数据更新到视图中
        双向既能模型到视图，又能视图到模型
        input type="text" :value="kword" 
        data:{
            kword:''
        },
        methods:{

        },
        watch：{
            kword(){
                // 监听kword 界面的修改
                // 用于搜索帮助和表单验证
            }
        }
各种表单元素的绑定方式：
1 文本框/文本域 v-model="模型变量"
2 单选按钮 radio name="groupname" value="1" v-model="gender"
    v-model 绑定的是checked操作 和 value的值进行比较
    checked = （变量==value）
3 复选框 绑定的也是checked属性 v-model="isAgree" true 和 false
4 选择框 select option 在select上 v-model=""

绑定class 和 style 属性
1 字符串方式绑定class 和 style
    :class=" pno==i? 'active' :'' "
2 用对象方式绑定
    data：{
        xxxClassObj：{
            fade：true/false //类名 放在一个对象属性
            in： fade in active 都是类名
            active：
        }
    }
    :class="xxxClassObj" :class 中的类回合class中的类合并
    ：class中，只有为true的类名，才能出现在class中
    :class=" pno==i? 'active' :'' "
如果是在多个元素之间，切换一个class，首选用字符串方式
控制一个元素的class，有与没有，首选用对象方式

style：2中方式
1：作为字符串属性绑定
2：也可以用对象方式绑定
    和class类似
今后所有的style都采用对象语法绑定

计算属性：
    不实际存储属性值，而是根据其他属性值动态计算获得
    不是所有值都可以直接获得

    data：{
        
    }
    computed:{
        属性名称(){
            return 计算后的值  
        }
    }
    绑定：和普通属性的绑定完全一样，{{属性名}} 不要加()

    放在method里面，也是一样的，调用的时候 total()
    计算属性 vs 函数
    计算属性的值可以被Vue缓存并重复使用，只要计算属性依赖的其他
    属性不改变，就不用重复计算
    函数只要调用，就重新计算

commonjs 和 es中的模块系统
    node --common.js

    commonjs：
        module.exports= {age:10,print:function(){}}
        const obj = require('./x')
        只能导出一个对象

    es6规范：
        export var age = 10
        export function print(){}
        import{age, print} from './x'  导出多个

        export default {age:10, print:function(){}}
        import obj from './x'           导出一个

        只能通过编译器工具预处理，转换成标准的js

webpack：
entry 入口
output 输出
loader 加载器 让webpack可以处理非js文件，如css，图片等
mode 运行模式 可以指定为production 或者development
 
 使用过程：
 npm init 
 
 配置文件：
 webpack.config.js
cnpm install webpack webpack-cli --save-dev


npx webpack --config webpack.config.js

D:\web\第三阶段前端进阶\3：Vue\03： VueJS 组件